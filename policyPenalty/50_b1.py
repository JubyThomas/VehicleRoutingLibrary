#!/usr/bin/env python3
# Copyright 2010-2021 Google LLC
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# [START program]
"""Capacited Vehicles Routing Problem (CVRP)."""

# [START import]
from ortools.constraint_solver import routing_enums_pb2
from ortools.constraint_solver import pywrapcp
import random
import numpy as np
# [END import]

dictSort={}
drop_nodes = []
mandatoryNodes=[]
mandatoryNodesById=[]
binSize=50 # we assume the bin size is 50 L for all our experiment
bin_fill_level=0.70
drop_nodes_greater_than70=[]
# [START data_model]



def create_data_model():
    """Stores the data for the problem."""
    data = {}
    data['distance_matrix'] =np.array([
                    [  0.,   223.37, 447.6,  280.42 ,482.03, 306.24, 469.85, 341.25 ,532.73, 110.55,
                449.18, 184.46, 556.53, 354.66, 363.,   199.09, 127.35, 535.62, 438.,   471.51,
                549.83, 216.94, 184.71, 467.12, 271.9,  266.43 ,182.22, 186.39, 418.61 ,113.44,
                453.68, 267.62, 235.7,  214.46, 268.,   378.06,  68.62 ,285.48, 447.89 ,320.52,
                185.56, 367.76 ,229.1,  530.65, 202.24, 235.02, 367.49, 243.56 ,530.53, 131.19],
                [223.37,   0.,   262.35, 218.01, 261.38, 116.38, 252.03, 166.42 ,362.79, 116.73,
                234.58, 280.48, 334.62, 138.95, 162.56, 187.97, 123.17 ,315.07, 223.68, 276.,
                326.94 ,170.74 ,167.61 ,298. ,  141.74 ,209.4,   43.83 ,175.84, 246.07, 125.21,
                259.33, 222.01, 185. ,  127.32, 115.83 ,160.21, 198.03 ,202.62 ,312.05, 147.87,
                242.84, 205.14, 231.91, 369.07, 164.  ,  15.65, 221.73, 155.31, 314.45, 100.69],
                [447.6,  262.35,   0. ,  226.24 ,254. ,  305.16 ,126.12 ,106.37 ,104.  , 341.34,
                279.97, 394.36 ,279.96, 251.67, 101.83, 448.2 , 381.18, 175.9  ,276.93, 362.23,
                215.19, 427.2,  428.89 , 50.99 ,180.07, 455.81, 284.31, 289.5 , 388.86, 334.39,
                26.57, 245.69 ,437.92 ,238. ,  179.61, 244.4 , 393.37 ,439.86, 118.41, 338.42,
                349.52, 378.93, 297.6,  116.81, 266.93, 246.71 ,407.83, 402.63, 313.08 ,319.98],
                [280.42, 218.01, 226.24  , 0. ,  401.14 ,327.44, 314.21 ,147.8,  279.3 , 206.21,
                398.93, 172.17, 456.51 ,319.25 ,198.72, 376.59, 278.86, 380.65, 390.39 ,464.36,
                412.38, 370.11, 354.23, 221.46,  88.54, 417.12, 200.28,  94.03, 453.12, 187.97,
                245.12 , 19.65, 388.14,  94.87, 116.91, 330.16, 213.22, 415.95, 177.77 ,362.09,
                130.  , 418.48 , 73.55, 270.19,  80.61 ,210.12, 438.01, 365.82, 464.28, 190.83],
                [482.03, 261.38, 254.,   401.14,   0.,   191.67, 132.02 ,259.22, 337.55, 378.06,
                51.89, 524.8,   75.71 ,128.84, 207.08, 372.02, 364.84, 131.24,  59.48 ,124.04,
                108.45, 342.01, 362.79, 304.16 ,315.41, 340.31, 305. ,  409.43, 181.23 ,385.88,
                229.18 ,415.49, 340.71, 347.35, 290.83, 104.69, 458.93, 313.,   369.39, 200.9,
                481.55, 202.41, 450.41, 358.4 , 389.9,  252.81 ,231.4,  304.16,  63.56 ,361.71],
                [306.24, 116.38, 305.16, 327.44 ,191.67 ,  0. ,  242.47 ,237.14, 408.95 ,216.18,
                148.93 ,394.66, 266.93 , 69.64, 207.23, 181.4 , 181.25 ,288.5  ,138.   ,166.88,
                285.26 ,152.07, 171.19, 351.21 ,243.25, 161.01, 153.95, 292.22 ,129.69 ,230.6,
                292.18, 333.95 ,153.77, 241.62, 214.39 , 92.23, 299.41, 139.23 ,386.24  ,36.14,
                358.52 , 91.05, 347.84 ,421.4 , 279.96, 119.44, 112.79, 115.95 ,229.27 ,206.23],
                [469.85 ,252.03, 126.12, 314.21 ,132.02 ,242.47,   0. ,  166.83 ,205.68 ,359.36,
                167.34 ,464.64 ,154.65, 175.03, 119.71, 414.61, 373.98 , 68.88 ,167.36 ,249.77,
                98.31, 388.14 ,399.33, 174.48, 240.52 ,403.41, 288.76, 349.78 ,290.85 ,359.87,
                99.98, 331.7 , 393.54, 288.53 ,224.5 , 157.89 ,429.54 ,381.29, 244.27 ,268.2,
                419.15, 294.19, 376.43, 226.38, 327.54 ,238.02, 324.62 ,355.71 ,188.02 ,339.17],
                [341.25, 166.42, 106.37, 147.8,  259.22 ,237.14, 166.83,   0.  , 199.06 ,235.26,
                265.41, 301.58 ,309.92, 202.89 , 52.35, 354.37, 279.25 ,234.24 ,258.5  ,339.61,
                264.76 ,336.59, 333.79 ,133.09 , 78.16 ,371.54, 181.65, 190.13, 345.56 ,228.02,
                114.28, 164.94 ,349.72, 133.96,  73.33 ,206.06, 288. ,  360.01 ,149.97 ,273.06,
                255.98 ,322.85 ,210.24, 203.33, 167.33, 151.38, 348.51, 317.19, 322.78 ,213.93],
                [532.73 ,362.79, 104.,   279.3 , 337.55, 408.95, 205.68, 199.06,   0.   ,431.3,
                371.25, 451.21 ,346.01, 353.62 ,205.24, 550.02, 478.3,  230.43 ,369.86 ,454.1,
                271.74, 529.9,  530.21,  66.31 ,260.85, 559.56 ,380.71, 360.01 ,487.46 ,421.55,
                118.51, 298.54 ,541.13, 318.45 ,268.33, 344.44, 473.23, 543.84 ,109.79 ,441.86,
                409.21 ,480.73, 352.69 , 24.7 , 338.87, 347.28, 510.05, 506.19 ,390.6  ,410.24],
                [110.55 ,116.73, 341.34, 206.21, 378.06, 216.18, 359.36, 235.26, 431.3  ,  0.,
                349.57 ,189.66, 451.3,  253.81, 253.28, 179.29 , 77.88 ,425.4  ,338.51 ,382.78,
                440.65, 181.22, 157.69, 365.07, 172.65, 233.02,  73.54, 122.   ,340.32 , 21.21,
                345.64 ,199.49 ,201.12, 120.42, 163.17, 276.03,  83.45, 241.4  ,355.42 ,238.52,
                164.08, 292.47, 180.65, 431.63, 126.78, 126.65, 299.93 ,191.21 ,430.17  ,21.38],
                [449.18, 234.58, 279.97, 398.93,  51.89, 148.93, 167.34 ,265.41 ,371.25, 349.57,
                    0.  , 508.38, 121.15 , 95.8,  215.54, 326.04, 327.77, 179.74 , 11.18,  82.86,
                160.02, 295.68, 318.34, 330.95 ,310.89, 290.77, 278.3,  395.22, 130.6,  359.68,
                257.17, 411.46, 293.,   334.82, 284.02,  74.95 ,432.2 , 262.91, 390.29, 153.03,
                466.8,  150.63, 441.17 ,390.52, 377.34, 228.58, 179.51, 257.28,  81.39, 335.04],
                [184.46, 280.48 ,394.36, 172.17, 524.8 , 394.66, 464.64, 301.58 ,451.21, 189.66,
                508.38 ,  0.  , 590.64 ,415.46, 344.94, 359.07, 261.61, 533.35 ,498.08, 556.37,
                559.75 ,366.87, 339.43 ,393.45, 224.54, 419.21, 240.71, 116.21, 523.24 ,170.21,
                410.49, 152.74, 386.97, 178.83, 241.02, 433.66, 126.78, 430.07 ,347.04 ,421.86,
                45.62, 477.83,  98.62 ,441.11, 137.57, 282.48 ,487.84 ,380.47 ,584.18 ,192.07],
                [556.53, 334.62, 279.96, 456.51 , 75.71, 266.93, 154.65, 309.92, 346.01 ,451.3,
                121.15 ,590.64 ,  0. ,  204.46, 258. ,  446.45, 440.38 ,116.52, 131. ,  168.94,
                76.9,  416.24, 437.83, 326.34, 374.35 ,411.76 ,377.9 , 474.54 ,238.62 ,458.12,
                253.48, 472.33 ,414.04, 411.95, 352.16, 180.24 ,531.13 ,383.65, 398.36 ,274.02,
                546.47, 268.56 ,511.32, 369.2,  454.01, 325.15, 295.75 ,378.05 , 63.78 ,434.28],
                [354.66, 138.95, 251.67 ,319.25 ,128.84 , 69.64, 175.03, 202.89 ,353.62 ,253.81,
                95.8,  415.46, 204.46,   0. ,  162.09, 249.93, 236.01, 218.87 , 84.81, 145.6,
                216.34, 221.12, 238.25, 300.53 ,230.89 ,229.92 ,182.58, 304.33, 142.86, 263.93,
                235.21, 329.51 ,223.39 ,246.01 ,202.34 , 24.33 ,336.4 , 206.65 ,345.48  ,93.23,
                375.05, 127.26, 353.75, 368.4,  287.89, 133.73, 156.43 ,185.54, 176.49, 239.27],
                [363. ,  162.56, 101.83 ,198.72, 207.08 ,207.23 ,119.71 , 52.35 ,205.24 ,253.28,
                215.54, 344.94 ,258.  , 162.09,   0. ,  346.75 ,283.98, 188.43, 209.27, 292.11,
                216.02, 325.41, 327.74, 144.46 ,120.93, 354.35, 189.27, 230.33 ,304.46, 250.16,
                96.77, 215.08, 336.11, 169.73, 105.48 ,161.25 ,316.36, 339.17, 183.39, 241.87,
                299.45 ,287.09, 257.53 ,215.43, 207.97, 146.93, 314.57, 300.96, 270.62 ,232.14],
                [199.09, 187.97, 448.2  ,376.59, 372.02, 181.4 , 414.61 ,354.37, 550.02 ,179.29,
                326.04 ,359.07, 446.45, 249.93, 346.75,   0.  , 101.41 ,466.97, 315.7 , 317.84,
                466.26,  30.59,  22.36, 485.72, 319.2, 68.26, 181.82, 300.28, 250.45, 200.45,
                442.48, 373.31 , 41.23 ,282.77, 297.85 ,273.34, 233.94,  91.92, 498.09 ,173.53,
                340.7,  200.24, 359.7,  556.92, 301.62 ,203.2 , 189. ,   69.43, 402.8,  188.79],
                [127.35, 123.17, 381.18, 278.86, 364.84, 181.25, 373.98 ,279.25 ,478.3,  77.88,
                327.77, 261.61, 440.38, 236.01, 283.98, 101.41 ,  0. ,  435.01, 316.62 ,344.82,
                443.19, 105.3,   79.91 ,412.31 ,230.73 ,157.62 , 97.62, 199.22 ,291.36 , 99.04,
                380.47 ,274.14, 125.4,  187.2,  213.81, 260.16 ,140.73, 169.54 ,413.94 ,193.35,
                240.3 , 240.68 ,258.38 ,481.92 ,201.78, 138.29 ,241.92, 122. ,  409.02 , 88.57],
                [535.62, 315.07, 175.9 , 380.65 ,131.24, 288.5,   68.88 ,234.24, 230.43, 425.4,
                179.74 ,533.35, 116.52, 218.87, 188.43 ,466.97, 435.01,   0. ,  183.99 ,255.05,
                41.44 ,439.01, 453.41, 217.35, 309.04, 448.28, 353.7,  418.63, 310.26, 426.88,
                149.72, 398.56 ,442.16, 357.4,  293.38, 197.45, 497.25, 423.77, 292.43, 308.85,
                487.83, 324.27 ,444.36 ,254.04, 396.35, 301.81, 354.46, 404.25, 168.66, 405.58],
                [438.,   223.68, 276.93 ,390.39,  59.48, 138. ,  167.36, 258.5,  369.86, 338.51,
                11.18 ,498.08, 131.  ,  84.81 ,209.27 ,315.7,  316.62, 183.99,   0. ,   85.33,
                166.37, 285.39, 307.74, 327.92, 302.17, 281.44, 267.37, 385.2 , 126.57, 348.74,
                254.7 , 402.65, 283.04, 325.06, 275.05 , 64.44, 421.2 , 253.84, 385.81, 143.01,
                456.68 ,143.27, 431.67, 388.67, 367.52, 217.86, 172.63 ,247.1 ,  92.57 ,324.08],
                [471.51, 276. ,  362.23 ,464.36, 124.04, 166.88 ,249.77 ,339.61 ,454.1,  382.78,
                82.86 ,556.37, 168.94 ,145.6 , 292.11, 317.84, 344.82 ,255.05,  85.33 ,  0.,
                228.41 ,287.58, 315.79, 413.22, 375.85, 268.15, 317.42 ,447.97 , 75.17, 396.44,
                339.8 , 475.,   279.4  ,390.99 ,347.56, 134.94 ,466.14 ,238.38, 470.7,  152.01,
                517.58 ,118.88, 498.89 ,473.36 ,432.46, 274.24, 139.13, 249.21 ,107.02 ,371.83],
                [549.83, 326.94, 215.19, 412.38 ,108.45, 285.26,  98.31, 264.76 ,271.74 ,440.65,
                160.02, 559.75,  76.9 , 216.34, 216.02, 466.26, 443.19 , 41.44 ,166.37, 228.41,
                    0. ,  437.28, 454.35 ,258.04 ,336.81 ,441.7,  367.7 , 444.04, 289.6 , 443.98,
                188.74, 429.7 , 438.55, 381.94, 318.75, 193.04, 515.69, 415.7 , 332.58, 301.27,
                514.49 ,309.51, 473.53, 295.43, 422.21, 314.82, 339. ,  400.98, 133.84 ,421.65],
                [216.94 ,170.74, 427.2 , 370.11 ,342.01, 152.07, 388.14 ,336.59, 529.9  ,181.22,
                295.68, 366.87, 416.24 ,221.12, 325.41,  30.59 ,105.3,  439.01, 285.39, 287.58,
                437.28 ,  0. ,   32.8,  466.41, 307.19,  52.35, 171.28 ,299.1 , 221.,   202.36,
                420.19 ,368.41,  20.1 , 275.39, 284.11, 244.24 ,244.38 , 68.6,  482.7,  143.01,
                345.02, 170.43, 359.22, 537.81, 298.12, 185.35, 160.65,  38.83, 372.24 ,187.42],
                [184.71, 167.61, 428.89, 354.23 ,362.79, 171.19 ,399.33, 333.79, 530.21, 157.69,
                318.34, 339.43, 437.83, 238.25 ,327.74,  22.36 , 79.91, 453.41, 307.74, 315.79,
                454.35 , 32.8  ,  0.  , 465.6 , 297.24,  82.22, 159.81, 278.3 , 251.25, 178.89,
                423.87 ,351.,    50.99, 260.42, 276.21, 262.09, 215.24 ,101.24, 476.69, 167.61,
                319.9 , 200.19, 337.85, 536.67, 279.38, 183. ,  192.26 , 67.23, 396.57, 166.68],
                [467.12, 298. ,   50.99 ,221.46 ,304.16 ,351.21, 174.48 ,133.09,  66.31, 365.07,
                330.95, 393.45, 326.34, 300.53, 144.46, 485.72, 412.31, 217.35 ,327.92, 413.22,
                258.04, 466.41, 465.6 ,   0. ,  195.26 ,497.88, 314.7 , 297.24, 439.03 ,355.55,
                75.01, 241.05 ,478.31, 253.19 ,202.04 ,294.33, 408.53, 483.44,  76.55 ,385.26,
                350.18, 427.6 , 294.93,  71.45, 275.59, 282.61 ,456.12, 444.06, 362.35 ,343.98],
                [271.9 , 141.74, 180.07,  88.54 ,315.41 ,243.25 ,240.52 , 78.16 ,260.85, 172.65,
                310.89, 224.54, 374.35 ,230.89, 120.93, 319.2 , 230.73, 309.04 ,302.17, 375.85,
                336.81 ,307.19, 297.24, 195.26 ,  0. ,  349.72, 137.44, 111.97, 366.49, 161.19,
                191.37 ,100.65, 323.36 , 58.31 , 29.07, 241.63 ,214.13 ,344.28 ,183.81 ,278.72,
                178.94 ,334.1 , 137.3 , 259.62,  89.19 ,130.77 ,355.35 ,296.2  ,378.05, 152.32],
                [266.43, 209.4 , 455.81, 417.12, 340.31, 161.01, 403.41, 371.54 ,559.56, 233.02,
                290.77 ,419.21, 411.76 ,229.92 ,354.35 , 68.26, 157.62 ,448.28 ,281.44 ,268.15,
                441.7 ,  52.35 , 82.22 ,497.88, 349.72 ,  0.  , 216.95 ,349.45, 196.02, 254.07,
                446.22, 416.52 , 32.25 ,322.26, 324.99, 250.84, 296.53,  29.83, 520.1,  140.43,
                397.01 ,149.48 ,409.71, 569.26 ,347.33 ,222.73 ,131.55 , 54.41, 362.02, 238.21],
                [182.22,  43.83 ,284.31, 200.28, 305.,   153.95, 288.76, 181.65, 380.71,  73.54,
                278.3,  240.71, 377.9 , 182.58, 189.27 ,181.82,  97.62 ,353.7 , 267.37, 317.42,
                367.7 , 171.28, 159.81, 314.7 , 137.44, 216.95,   0.   ,142.71, 282.79,  81.4,
                284.89 ,200.63, 188.56, 105.51, 117.52, 204.02, 154.21, 216.12, 318.4,  182.,
                205.41, 238.76, 201.64, 384.36, 135.   , 53.14, 251.86, 165.66, 358.28 , 56.86],
                [186.39 ,175.84, 289.5 ,  94.03 ,409.43, 292.22, 349.78 ,190.13 ,360.01 ,122.,
                395.22, 116.21 ,474.54 ,304.33, 230.33 ,300.28 ,199.22, 418.63, 385.2 , 447.97,
                444.04, 299.1 , 278.3  ,297.24 ,111.97 ,349.45, 142.71,   0. ,  421.91, 101.55,
                302.63,  82.07 ,318.44 , 62.63, 125.4,  321.08, 119.42, 353.57, 266.08 ,322.94,
                72.12, 380.12 , 60.3 , 354.29 , 22.8 , 174.54 ,394.39, 302.48 ,469.54 ,111.83],
                [418.61, 246.07 ,388.86, 453.12, 181.23, 129.69, 290.85 ,345.56, 487.46, 340.32,
                130.6,  523.24, 238.62, 142.86, 304.46, 250.45, 291.36, 310.26 ,126.57,  75.17,
                289.6,  221. ,  251.25, 439.03, 366.49, 196.02, 282.79 ,421.91,   0.,   356.55,
                369.54, 460.99, 210.49 ,370.35, 337.43, 144.84 ,422.1 , 166.21, 487.75, 101.87,
                487.94 , 51.4 , 477.2  ,504.34 ,409.38 ,248.49,  64.94 ,184.02, 179.54 ,332.79],
                [113.44, 125.21 ,334.39 ,187.97, 385.88, 230.6 , 359.87 ,228.02 ,421.55,  21.21,
                359.68, 170.21, 458.12, 263.93, 250.16, 200.45,  99.04, 426.88, 348.74, 396.44,
                443.98, 202.36, 178.89, 355.55 ,161.19, 254.07,  81.4,  101.55, 356.55,   0.,
                340.24, 180.31, 222.23 ,106.17 ,154.93 ,285.41,  73.06, 262.01, 342.09, 254.68,
                143.22, 309.5 , 159.7 , 420.8,  107.8,  133.09, 318.1,  211.6  ,439.66,  24.76],
                [453.68, 259.33,  26.57 ,245.12 ,229.18, 292.18,  99.98, 114.28, 118.51, 345.64,
                257.17, 410.49, 253.48, 235.21 , 96.77, 442.48, 380.47, 149.72, 254.7 , 339.8,
                188.74, 420.19, 423.87 , 75.01 ,191.37, 446.22 ,284.89 ,302.63 ,369.54 ,340.24,
                    0.,   264.3,  429.89, 248.16 ,187.  , 226.02, 402.08, 428.9 , 144.92, 324.32,
                365.25, 362.25, 315.01, 134.85, 279.87 ,243.7 , 391.63, 393.81, 287.5 , 324.28],
                [267.62 ,222.01 ,245.69 , 19.65, 415.49, 333.95, 331.7,  164.94, 298.54, 199.49,
                411.46, 152.74 ,472.33, 329.51 ,215.08, 373.31, 274.14 ,398.56, 402.65, 475.,
                429.7 , 368.41 ,351. ,  241.05 ,100.65 ,416.52, 200.63,  82.07, 460.99, 180.31,
                264.3,    0. ,  386.87,  95.63, 127.77, 341.49, 199.69, 416.75 ,196.02, 367.99,
                111.11, 424.79,  54.15, 289.04 , 72.72 ,215.33, 443.29, 366.19, 478.38, 185.61],
                [235.7 , 185. ,  437.92 ,388.14 ,340.71, 153.77, 393.54 ,349.72 ,541.13, 201.12,
                293.  , 386.97, 414.04 ,223.39 ,336.11 , 41.23 ,125.4 , 442.16 ,283.04 ,279.4,
                438.55,  20.1,   50.99, 478.31, 323.36 , 32.25 ,188.56, 318.44 ,210.49 ,222.23,
                429.89, 386.87  , 0.  , 293.31, 299.58, 245.78, 264.37 , 51.09 ,496.95 ,140.03,
                365.01, 160.98 ,378.63, 549.75, 317. ,  199.12 ,148.22 , 37.95, 367.77, 206.9 ],
                [214.46 ,127.32, 238. ,   94.87, 347.35, 241.62, 288.53 ,133.96, 318.45, 120.42,
                334.82, 178.83, 411.95, 246.01, 169.73, 282.77, 187.2,  357.4,  325.06, 390.99,
                381.94, 275.39, 260.42, 253.19,  58.31, 322.26 ,105.51,  62.63, 370.35, 106.17,
                248.16,  95.63 ,293.31,   0. ,   64.26, 261.4 , 155.82, 321.49, 235.93, 274.64,
                134.54, 331.79, 107.94, 316.23,  42.64 ,122.18 ,349.05, 271.15, 407.94, 101.86],
                [268. ,  115.83, 179.61, 116.91 ,290.83, 214.39, 224.5 ,  73.33, 268.33, 163.17,
                284.02, 241.02, 352.16, 202.34, 105.48, 297.85 ,213.81, 293.38, 275.05, 347.56,
                318.75, 284.11 ,276.21 ,202.04 , 29.07 ,324.99, 117.52, 125.4  ,337.43 ,154.93,
                187.  , 127.77, 299.58,  64.26 ,  0. ,  213.74, 215.11, 318.31, 200.9  ,249.97,
                195.88 ,305.16, 159.67, 269.68, 103.46, 103.82 ,326.67, 271.06, 352.93, 142.  ],
                [378.06, 160.21, 244.4,  330.16, 104.69 , 92.23 ,157.89 ,206.06, 344.44, 276.03,
                74.95 ,433.66, 180.24  ,24.33, 161.25 ,273.34 ,260.16 ,197.45,  64.44, 134.94,
                193.04, 244.24, 262.09 ,294.33 ,241.63 ,250.84, 204.02, 321.08, 144.84, 285.41,
                226.02, 341.49, 245.78 ,261.4 , 213.74 ,  0. ,  358.17 ,226.52 ,343.79, 111.8,
                392.41 ,137.77 ,368.51 ,360.46, 303.73, 153.72 ,167.92, 208.08, 154.26 ,260.86],
                [ 68.62 ,198.03 ,393.37, 213.22, 458.93, 299.41, 429.54, 288.,   473.23 , 83.45,
                432.2 , 126.78, 531.13 ,336.4 , 316.36, 233.94 ,140.73, 497.25 ,421.2,  466.14,
                515.69, 244.38 ,215.24, 408.53 ,214.13 ,296.53 ,154.21 ,119.42, 422.1 ,  73.06,
                402.08, 199.69, 264.37, 155.82 ,215.11 ,358.17  , 0. ,  310.16 ,384.03, 320.6,
                119.42 ,373.32, 160.53, 469.55, 137.06 ,206.16 ,378.61 ,262.55, 512.43  ,97.35],
                [285.48, 202.62, 439.86, 415.95, 313.,   139.23 ,381.29 ,360.01, 543.84, 241.4,
                262.91 ,430.07 ,383.65, 206.65, 339.17,  91.92, 169.54, 423.77, 253.84, 238.38,
                415.7  , 68.6 , 101.24 ,483.44, 344.28 , 29.83 ,216.12 ,353.57, 166.21 ,262.01,
                428.9 , 416.75 , 51.09, 321.49, 318.31, 226.52 ,310.16  , 0.  , 509.57, 114.95,
                405.19 ,119.82, 413.82 ,554.58 ,349.53 ,214.71 ,101.84 , 51.09 ,333.01 ,244.05],
                [447.89 ,312.05 ,118.41 ,177.77 ,369.39 ,386.24 ,244.27, 149.97, 109.79, 355.42,
                390.29, 347.04, 398.36, 345.48, 183.39 ,498.09, 413.94, 292.43 ,385.81, 470.7,
                332.58 ,482.7 , 476.69 , 76.55 ,183.81, 520.1 , 318.4  ,266.08 ,487.75 ,342.09,
                144.92 ,196.02 ,496.95, 235.93, 200.9 , 343.79 ,384.03 ,509.57  , 0.   ,421.89,
                307.02 ,469.66 ,249.51 , 95.19 ,247.01 ,297.85, 496.4 , 465.69, 429.93, 335.6 ],
                [320.52 ,147.87 ,338.42, 362.09 ,200.9 ,  36.14 ,268.2 , 273.06, 441.86, 238.52,
                153.03, 421.86 ,274.02,  93.23, 241.87, 173.53, 193.35 ,308.85, 143.01, 152.01,
                301.27, 143.01, 167.61, 385.26, 278.72, 140.43, 182. ,  322.94, 101.87, 254.68,
                324.32, 367.99 ,140.03, 274.64, 249.97, 111.8,  320.6,  114.95, 421.89,   0.,
                387.41 , 57.27 ,379.74 ,455.  , 311.85, 152.74 , 76.79 ,104.39, 229.34, 230.97],
                [185.56, 242.84, 349.52 ,130. ,  481.55, 358.52 ,419.15, 255.98, 409.21, 164.08,
                466.8 ,  45.62 ,546.47, 375.05, 299.45 ,340.7 , 240.3 , 487.83, 456.68 ,517.58,
                514.49 ,345.02, 319.9 , 350.18, 178.94 ,397.01, 205.41,  72.12, 487.94 ,143.22,
                365.25 ,111.11, 365.01, 134.54, 195.88, 392.41, 119.42 ,405.19 ,307.02 ,387.41,
                    0. ,  444.1,   57.71, 400.12 , 92.62, 243.37, 456.04, 354.63, 541.57, 162.1 ],
                [367.76, 205.14, 378.93 ,418.48, 202.41,  91.05, 294.19, 322.85, 480.73, 292.47,
                150.63, 477.83 ,268.56, 127.26, 287.09, 200.24 ,240.68, 324.27, 143.27, 118.88,
                309.51, 170.43 ,200.19, 427.6,  334.1 , 149.48 ,238.76, 380.12,  51.4 , 309.5,
                362.25 ,424.79, 160.98 ,331.79 ,305.16, 137.77, 373.32 ,119.82 ,469.66 , 57.27,
                444.1 ,   0. ,  437.01, 495.67, 369.12, 209.75 , 30.48 ,132.97, 214.67, 286.25],
                [229.1 , 231.91 ,297.6  , 73.55 ,450.41 ,347.84 ,376.43 ,210.24, 352.69 ,180.65,
                441.17,  98.62, 511.32, 353.75, 257.53 ,359.7 , 258.38, 444.36, 431.67 ,498.89,
                473.53, 359.22, 337.85, 294.93, 137.3 , 409.71, 201.64 , 60.3,  477.2 , 159.7,
                315.01 , 54.15 ,378.63 ,107.94, 159.67, 368.51, 160.53, 413.82, 249.51, 379.74,
                57.71, 437.01 ,  0.  , 343. ,   67.91, 228.73, 452.45 ,362.73, 512.2,  171.82],
                [530.65, 369.07 ,116.81, 270.19, 358.4 , 421.4,  226.38, 203.33 , 24.7 , 431.63,
                390.52, 441.11 ,369.2,  368.4 , 215.43, 556.92 ,481.92 ,254.04, 388.67, 473.36,
                295.43, 537.81 ,536.67 , 71.45, 259.62, 569.26 ,384.36, 354.29, 504.34, 420.8,
                134.85, 289.04, 549.75, 316.23, 269.68, 360.46, 469.55, 554.58,  95.19 ,455.,
                400.12, 495.67 ,343. ,    0.,   333.79, 353.74, 524.63, 515.49, 412.57, 410.82],
                [202.24, 164.  , 266.93 , 80.61, 389.9 , 279.96, 327.54, 167.33, 338.87 ,126.78,
                377.34, 137.57 ,454.01 ,287.89, 207.97 ,301.62, 201.78, 396.35, 367.52, 432.46,
                422.21, 298.12, 279.38 ,275.59,  89.19, 347.33, 135. ,   22.8  ,409.38, 107.8,
                279.87,  72.72 ,317. ,   42.64, 103.46, 303.73, 137.06, 349.53, 247.01, 311.85,
                92.62, 369.12 , 67.91 ,333.79  , 0.  , 160.96 ,384.81 ,298.56 ,450.57 ,113.22],
                [235.02 , 15.65, 246.71 ,210.12 ,252.81 ,119.44 ,238.02, 151.38, 347.28, 126.65,
                228.58, 282.48, 325.15, 133.73, 146.93, 203.2,  138.29, 301.81, 217.86, 274.24,
                314.82, 185.35, 183.  , 282.61, 130.77, 222.73,  53.14, 174.54, 248.49 ,133.09,
                243.7 , 215.33, 199.12 ,122.18 ,103.82, 153.72 ,206.16, 214.71, 297.85, 152.74,
                243.37, 209.75 ,228.73 ,353.74, 160.96,   0.,   228.04 ,168.43, 307.51 ,109.13],
                [367.49, 221.73, 407.83, 438.01, 231.4,  112.79 ,324.62 ,348.51, 510.05, 299.93,
                179.51 ,487.84 ,295.75, 156.43, 314.57 ,189. ,  241.92 ,354.46, 172.63, 139.13,
                339.  , 160.65, 192.26 ,456.12 ,355.35 ,131.55 ,251.86 ,394.39  ,64.94 ,318.1,
                391.63 ,443.29, 148.22 ,349.05, 326.67, 167.92 ,378.61, 101.84, 496.4  , 76.79,
                456.04 , 30.48, 452.45, 524.63 ,384.81 ,228.04 ,  0.  , 125.99 ,239.87 ,295.78],
                [243.56 ,155.31, 402.63, 365.82, 304.16, 115.95, 355.71, 317.19, 506.19 ,191.21,
                257.28, 380.47 ,378.05 ,185.54 ,300.96  ,69.43 ,122.   ,404.25, 247.1  ,249.21,
                400.98 , 38.83 , 67.23, 444.06, 296.2  , 54.41, 165.66, 302.48 ,184.02 ,211.6,
                393.81, 366.19 , 37.95, 271.15 ,271.06, 208.08, 262.55 , 51.09 ,465.69 ,104.39,
                354.63 ,132.97 ,362.73 ,515.49 ,298.56 ,168.43, 125.99  , 0.  , 333.47 ,193.17],
                [530.53 ,314.45, 313.08 ,464.28,  63.56, 229.27, 188.02 ,322.78, 390.6 , 430.17,
                81.39 ,584.18 , 63.78 ,176.49 ,270.62 ,402.8  ,409.02 ,168.66  ,92.57, 107.02,
                133.84 ,372.24 ,396.57, 362.35, 378.05, 362.02 ,358.28, 469.54 ,179.54, 439.66,
                287.5 , 478.38 ,367.77 ,407.94 ,352.93, 154.26 ,512.43 ,333.01 ,429.93 ,229.34,
                541.57 ,214.67, 512.2 , 412.57, 450.57 ,307.51 ,239.87 ,333.47  , 0.  , 415.12],
                [131.19 ,100.69, 319.98, 190.83, 361.71, 206.23, 339.17, 213.93 ,410.24 , 21.38,
                335.04, 192.07, 434.28 ,239.27, 232.14, 188.79 , 88.57 ,405.58 ,324.08, 371.83,
                421.65 ,187.42 ,166.68, 343.98 ,152.32, 238.21 , 56.86, 111.83, 332.79,  24.76,
                324.28 ,185.61 ,206.9  ,101.86, 142.  , 260.86,  97.35, 244.05 ,335.6,  230.97,
                162.1,  286.25, 171.82 ,410.82 ,113.22 ,109.13, 295.78, 193.17, 415.12 ,  0.  ],
                ])

    #"""To form the the Demand"""
    # if count ==1:
    data['demands'] =[0, 43, 41, 45, 29, 39, 37, 37, 37, 37, 36, 36, 35, 33, 33, 31, 31, 30, 29,
                         29, 28, 26, 25, 24, 23, 23, 22, 22, 22, 22, 21, 20, 16, 16, 15, 15, 15, 
                         14, 12, 12, 10, 10, 8, 6, 5, 3, 27, 14, 30, 15]
    global total_demand_per_day
    total_demand_per_day=sum(data['demands'])
    global number_of_nodes
    number_of_nodes=len(data['demands'])
 
    data['num_vehicles'] = 4
    global number_of_routes_created
    number_of_routes_created=data['num_vehicles']
    
    data['vehicle_capacities'] = [200,200,200,200]
    global effective_vehicle_capacity
    effective_vehicle_capacity=sum(data['vehicle_capacities'])


    data['depot'] = 0

    dictSort={}

    for val in range(len(data['demands'])):
        dictSort[val]=data['demands'][val]
 
    print(dictSort)

    #Creating Array which contains details of mandatory nodes to be picked up
    y= sorted(data["demands"],reverse=True)
    print(y)

    temp=0
    if(sum(y)>sum(data['vehicle_capacities'])):
     for testy in y:
        temp=sum(mandatoryNodes)+testy
        if(temp<=sum(data['vehicle_capacities'])):
           mandatoryNodes.append(testy)

    print("Mandatory Nodes To Be Picked")
    print(mandatoryNodes)
    

 

    # To remove dropped nodes from dictionary
    removedOtherNodes=[]

    for key,value in dictSort.items():
        if value not in mandatoryNodes:
            drop_nodes.append(key)
            removedOtherNodes.append(key)
        else:
            mandatoryNodesById.append(key)    

    for x in removedOtherNodes:
        dictSort.pop(x)    
        
    print(dictSort)
    return data
    # [END data_model]


def print_solution(data, manager, routing, assignment):
    """Prints assignment on console."""
    print(f'Objective: {assignment.ObjectiveValue()}')
    # Display dropped nodes.
    dropped_nodes = []
    for node in range(routing.Size()):
        if routing.IsStart(node) or routing.IsEnd(node):
            continue
        if assignment.Value(routing.NextVar(node)) == node:
            dropped_nodes.append(manager.IndexToNode(node))

    for x in dropped_nodes:
        if x in mandatoryNodesById:
            mandatoryNodesById.remove(x)
            drop_nodes.append(x) 

    # Display routes
    total_distance = 0
    total_load = 0
    for vehicle_id in range(data['num_vehicles']):
        index = routing.Start(vehicle_id)
        plan_output = 'Route for vehicle {}:\n'.format(vehicle_id)
        route_distance = 0
        route_load = 0
        while not routing.IsEnd(index):
            node_index = manager.IndexToNode(index)
            route_load += data['demands'][node_index]
            plan_output += ' {0} Load({1}) -> '.format(node_index, route_load)
            previous_index = index
            index = assignment.Value(routing.NextVar(index))
            route_distance += routing.GetArcCostForVehicle(
                previous_index, index, vehicle_id)
        plan_output += ' {0} Load({1})\n'.format(manager.IndexToNode(index),
                                                 route_load)
        plan_output += 'Distance of the route: {}m\n'.format(route_distance)
        plan_output += 'Load of the route: {}\n'.format(route_load)
        print(plan_output)
        total_distance += route_distance
        total_load += route_load
    print('Total Distance of all routes: {}m'.format(total_distance))
    print('Total Load of all routes: {}'.format(total_load))
    print("*****************Result of Number of Nodes with Fill level >70% ****************************************")
    node_greaterthan_70=[]
    print("Total Number Of Demands:",len(data['demands']))               
    for val in range(0,len(data['demands'])):
        if(data['demands'][val] >= binSize*0.70 ):
            node_greaterthan_70.append(val)
            
    
    for val in dropped_nodes:
        if (val in node_greaterthan_70 ):
            drop_nodes_greater_than70.append(val)
   
    print("Number Of nodes :",number_of_nodes) 
    print("Number of Routes Created:",number_of_routes_created)
    print("Number of Nodes Dropped:",len(drop_nodes))
    print("Total Demand Per Day :",total_demand_per_day)
    print("Unutilized Capacity :",effective_vehicle_capacity -total_load)
    print("Effective Vehicle Capacity :",effective_vehicle_capacity)
    print("\n")   
    print("Node id Which must be dropped",sorted(drop_nodes))                
    print("Mandatory Nodes By Id",mandatoryNodesById)
    print("Nodes With fill Level greater than 70% :",node_greaterthan_70) 
    print("Total Number of Nodes With Fill level>70% :",len(node_greaterthan_70))
    print("Total Number of Dropped Nodes With Fill level>70% :",len(drop_nodes_greater_than70))
    print("Total Number of  Visited Nodes Nodes With Fill level>70% :",len(node_greaterthan_70)- len(drop_nodes_greater_than70))
    print("***********************************************************")

def main():
    """Solve the CVRP problem."""
    # Instantiate the data problem.
   # for count in range(1,6):
    data = create_data_model()

    # Create the routing index manager.
    manager = pywrapcp.RoutingIndexManager(len(data['distance_matrix']),
                                           data['num_vehicles'], data['depot'])

    # Create Routing Model.
    routing = pywrapcp.RoutingModel(manager)


    # Create and register a transit callback.
    def distance_callback(from_index, to_index):
        """Returns the distance between the two nodes."""
        # Convert from routing variable Index to distance matrix NodeIndex.
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        return data['distance_matrix'][from_node][to_node]

    transit_callback_index = routing.RegisterTransitCallback(distance_callback)

    # Define cost of each arc.
    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)


    # Add Capacity constraint.
    def demand_callback(from_index):
        """Returns the demand of the node."""
        # Convert from routing variable Index to demands NodeIndex.
        from_node = manager.IndexToNode(from_index)
        return data['demands'][from_node]

    demand_callback_index = routing.RegisterUnaryTransitCallback(
        demand_callback)
    routing.AddDimensionWithVehicleCapacity(
        demand_callback_index,
        0,  # null capacity slack
        data['vehicle_capacities'],  # vehicle maximum capacities
        True,  # start cumul to zero
        'Capacity')
    
    # Allow to drop nodes.
     
    #Adding Penalty To Mandatory Nodes That Need To Be Picked Up

    penalty = 10000
    for node in range(1, len(data['distance_matrix'])):
        
        if(manager.NodeToIndex(node) in mandatoryNodesById):
            routing.AddDisjunction([manager.NodeToIndex(node)], penalty)
        else:
            routing.AddDisjunction([manager.NodeToIndex(node)], 0)

 

    # Setting first solution heuristic.
    search_parameters = pywrapcp.DefaultRoutingSearchParameters()
    search_parameters.first_solution_strategy = (
        routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)
    search_parameters.local_search_metaheuristic = (
        routing_enums_pb2.LocalSearchMetaheuristic.GUIDED_LOCAL_SEARCH)
    search_parameters.time_limit.FromSeconds(1)

    # Solve the problem.
    assignment = routing.SolveWithParameters(search_parameters)

    # Print solution on console.
    
    if assignment:
           print_solution(data, manager, routing, assignment)


if __name__ == '__main__':
    main()